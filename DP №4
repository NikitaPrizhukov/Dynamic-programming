#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

//движение по полю происходит от левого нижнего угла, до верхнего правого, можно двигаться только вправо или в верх
//нужно собрать максимальное количество очков, затем вывести пусть по которому эти очки были собраны

string findWay(int** move, int line, int tab) {

    int x = tab - 1;
    int y = 0;
    string way;

    while (1) {

        if (x > 0 && y < line - 1) {
            if (move[x][y + 1] > move[x - 1][y]) {
                way.push_back('U');
                y++;
            }
            else {
                way.push_back('R');
                x--;
            }
        }
        else if (x == 0) {
            way.push_back('U');
            y++;
        }
        else if (y == line - 1) {
            way.push_back('R');
            x--;
        }

        if (x == 0 && y == line - 1) {
            break;
        }
    }

    return way;
}

void flowers(int** matrix, int line, int tab) {

    int** move = new int* [tab];

    for (int i = 0; i < tab; i++) {
        move[i] = new int[line];
    }

    for (int i = 0; i < tab; i++) {
        for (int f = line - 1; f > -1; f--) {

            int left = 0;
            int bot = 0;

            if (i != 0) {
                left = move[i - 1][f];
            }

            if (f != line - 1) {
                bot = move[i][f + 1];
            }

            move[i][f] = max(left, bot) + matrix[i][f];
        }
    }

    cout << move[tab - 1][0] << endl;

    if (line > 1 && tab > 1) {
        string way = findWay(move, line, tab);

        for (int i = way.size() - 1; i > -1; i--) {
            cout << way[i];
        }
    }
}

int main() {

    int tab, line;
    cin >> line >> tab;

    int** matrix = new int* [tab];

    for (int i = 0; i < tab; i++) {
        matrix[i] = new int[line];
    }

    for (int i = 0; i < line; i++) {

        string text;
        cin >> text;

        for (int f = 0; f < tab; f++) {
            if (text[f] == '0') matrix[f][i] = 0;
            else matrix[f][i] = 1;
        }
    }

    flowers(matrix, line, tab);

    return 0;
}
